name: AI-News Theme Smoke Tests Workflow

permissions:
  contents: read

on:
  push:
    branches: [ "main" ]
    paths:
      - "**/*.php"
      - "style.css"
      - ".github/workflows/smoke-tests-workflow.yml"
  pull_request:
    branches: [ "main" ]
  workflow_dispatch: {}

env:
  WP_NET: wpnet
  WP_DB_CONTAINER: mysql
  WP_WEB_CONTAINER: wp
  WP_URL: http://localhost:8080
  WP_PATH: /var/www/html
  THEME_SLUG: ai-news-hub
  THEME_PATH: /var/www/html/wp-content/themes/ai-news-hub

jobs:
  smoke_and_ai:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Create Docker network
        run: docker network create "${WP_NET}" || true

      - name: Start MySQL
        run: |
          docker run -d --name "${WP_DB_CONTAINER}" \
            --network "${WP_NET}" \
            -e MYSQL_DATABASE=wp \
            -e MYSQL_USER=wp \
            -e MYSQL_PASSWORD=wp \
            -e MYSQL_ROOT_PASSWORD=root \
            -p 3306:3306 \
            mysql:8
          for i in {1..60}; do
            docker exec "${WP_DB_CONTAINER}" sh -lc 'mysqladmin ping -h 127.0.0.1 -uroot -proot >/dev/null 2>&1' && break
            echo "Waiting for MySQL..."; sleep 2
          done

      - name: Start WordPress
        run: |
          docker run -d --name "${WP_WEB_CONTAINER}" \
            --network "${WP_NET}" \
            -e WORDPRESS_DB_HOST=${WP_DB_CONTAINER}:3306 \
            -e WORDPRESS_DB_USER=wp \
            -e WORDPRESS_DB_PASSWORD=wp \
            -e WORDPRESS_DB_NAME=wp \
            -p 8080:80 \
            wordpress:php8.2-apache

      - name: Copy fresh WordPress core
        run: |
          docker stop "${WP_WEB_CONTAINER}"
          curl -sSL https://wordpress.org/latest.zip -o /tmp/wp.zip
          rm -rf /tmp/wordpress && unzip -q /tmp/wp.zip -d /tmp
          docker cp /tmp/wordpress/. "${WP_WEB_CONTAINER}:${WP_PATH}/"
          docker start "${WP_WEB_CONTAINER}"

      - name: Install WP-CLI and configure site
        run: |
          curl -sS -L https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar -o /tmp/wp-cli.phar
          docker cp /tmp/wp-cli.phar "${WP_WEB_CONTAINER}:/usr/local/bin/wp"
          docker exec "${WP_WEB_CONTAINER}" bash -lc 'chmod +x /usr/local/bin/wp && /usr/local/bin/wp --version || true'
          docker exec "${WP_WEB_CONTAINER}" bash -lc '
            set -e
            for i in {1..60}; do
              mysqladmin ping -h '"${WP_DB_CONTAINER}"' -P 3306 -u wp -pwp >/dev/null 2>&1 && break
              echo "Waiting for DB..."; sleep 2
            done
            WP="/usr/local/bin/wp --allow-root --path='"${WP_PATH}"'"
            rm -f '"${WP_PATH}"'/wp-config.php
            $WP config create --dbname=wp --dbuser=wp --dbpass=wp --dbhost='"${WP_DB_CONTAINER}"':3306
            $WP db create || true
            $WP core is-installed || $WP core install \
              --url='"${WP_URL}"' \
              --title="CI Site" \
              --admin_user=admin \
              --admin_password=admin \
              --admin_email=admin@example.com \
              --skip-email
          '

      - name: Start Apache and wait
        run: |
          docker exec "${WP_WEB_CONTAINER}" bash -lc 'apache2ctl -k start'
          for i in {1..120}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" "${WP_URL}/" || true)
            if [ "$code" = "200" ] || [ "$code" = "302" ]; then
              echo "Apache ready ($code)"; break
            fi
            echo "Waiting for Apache... HTTP $code"; sleep 1
          done

      - name: Copy theme into container
        run: |
          docker exec "${WP_WEB_CONTAINER}" bash -lc 'rm -rf "'"${THEME_PATH}"'"'
          docker cp . "${WP_WEB_CONTAINER}:${THEME_PATH}"

      - name: Activate theme and register CPT
        run: |
          docker exec "${WP_WEB_CONTAINER}" /usr/local/bin/wp theme activate "${THEME_SLUG}" --allow-root --path="${WP_PATH}"
          docker exec "${WP_WEB_CONTAINER}" /bin/bash -lc 'mkdir -p '"${WP_PATH}"'/wp-content/mu-plugins && cat >'"${WP_PATH}"'/wp-content/mu-plugins/ai-news-hub-cpt.php <<PHP
          <?php
          add_action("init", function () {
            register_post_type("article", array(
              "labels" => array("name" => "Articles","singular_name" => "Article"),
              "public" => true,
              "has_archive" => true,
              "show_in_rest" => true,
              "rest_base" => "articles",
              "supports" => array("title","editor","excerpt","thumbnail"),
              "taxonomies" => array("post_tag"),
              "rewrite" => array("slug" => "articles"),
            ));
          });
          PHP'
          docker exec "${WP_WEB_CONTAINER}" /usr/local/bin/wp rewrite structure '/%postname%/' --hard --allow-root --path="${WP_PATH}"
          docker exec "${WP_WEB_CONTAINER}" /usr/local/bin/wp rewrite flush --hard --allow-root --path="${WP_PATH}"

      - name: Create sample Article
        run: |
          docker exec "${WP_WEB_CONTAINER}" /usr/local/bin/wp post create \
            --post_type=article \
            --post_title="CI Sample Article created during Smoke Test run" \
            --post_status=publish \
            --allow-root --path="${WP_PATH}"

      # Smoke test – homepage confirms that homepage loads successfully
      - name: Smoke test – homepage
        run: curl -sSf "${WP_URL}/" | grep -i "Search Article Archive"
      # Smoke test – Articles archive confirms that Articles page loads successfully
      - name: Smoke test – Articles archive
        run: curl -sSf "${WP_URL}/articles/" | grep -i "Articles"
      # Smoke test – REST confirms that the API endpoint /wp-json/wp/v2/articles responds successfully
      - name: Smoke test – REST
        run: curl -sSf "${WP_URL}/wp-json/wp/v2/articles" | grep -i "CI Sample Article created during Smoke Test run"

      # Smoke test – AI Research Article creates an article from an  OpenAI‑compatible endpoint and verifiest hat  at least one Article ID exists
      - name: Smoke test – AI Research Article
        env:
          AINEWS_OPENAI_API_KEY: ${{ secrets.AINEWS_OPENAI_API_KEY }}
        run: |
          if [ -n "${AINEWS_OPENAI_API_KEY}" ] && [ "${{ github.event_name }}" != "pull_request" ]; then
            docker exec -e AINEWS_OPENAI_API_KEY="${AINEWS_OPENAI_API_KEY}" "${WP_WEB_CONTAINER}" bash -lc "/usr/local/bin/wp ai-research --topic='AI trends in education' --path='${WP_PATH}' --allow-root"
            docker exec "${WP_WEB_CONTAINER}" /usr/local/bin/wp post list --post_type=article --format=ids --allow-root --path="${WP_PATH}" | grep -q .
          else
            echo "Skipping Smoke test – AI Research Article (no key or PR context)."
          fi
